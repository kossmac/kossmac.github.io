{"version":3,"sources":["assets/metronome.svg","Tab.js","AudioContext.js","Metronome.js","String.js","Guitar.js","Tuner.js","Canvas.js","AudioAnalyse.js","Visualization.js","Tabs.js","App.js","index.js"],"names":["module","exports","Tab","props","title","onItemClicked","isActive","className","onClick","audioContext","AudioContext","context","createContext","Metronome","useState","play","setPlay","bpm","setBPM","timer","setTimerID","useContext","playSound","oscillator","createOscillator","type","g","createGain","gain","exponentialRampToValueAtTime","currentTime","connect","destination","start","src","metronome","alt","readOnly","id","value","min","max","onChange","e","ms","BPMtoMS","target","document","getElementsByClassName","style","animationDuration","clearInterval","setInterval","String","name","frequency","onMouseEnter","onHover","Guitar","undefined","setOscillator","freq","stop","newOscillator","useEffect","map","index","key","Tuner","Canvas","canvas","useRef","audioData","height","current","width","getContext","x","segmentWidth","length","gradient","createLinearGradient","addColorStop","lineWidth","strokeStyle","clearRect","beginPath","moveTo","y","lineTo","stroke","drawCanvas","ref","paddingTop","AudioAnalyse","state","Uint8Array","animate","bind","this","window","analyser","createAnalyser","audioArray","frequencyBinCount","input","createMediaStreamSource","audio","aniID","requestAnimationFrame","getByteTimeDomainData","setState","cancelAnimationFrame","disconnect","Component","Visualization","setAudio","a","navigator","mediaDevices","getUserMedia","getMicrophone","Tabs","activeTabId","setActiveTabId","tabItems","content","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c89abecc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metronome.a67d5ec0.svg\";","import React from 'react';\n\nfunction Tab(props) {\n  const {title, onItemClicked, isActive} = props\n\n  return (\n    <div className={isActive ? 'tab' : 'tab tabitem--inactive'} onClick={onItemClicked}>\n      <p className=\"tabitem__title\">{title}</p>\n    </div>\n  )\n};\n\nexport default Tab;\n","import { createContext } from \"react\";\n\n// create reusable audiocontext \n\nconst audioContext = new AudioContext();\nconst context = createContext({ audioContext });\n\nexport default context;\n","import React, { useState, useContext } from 'react';\n\nimport './css/Metronome.css';\nimport metronome from './assets/metronome.svg';\n\nimport context from \"./AudioContext\";\n\n\nfunction Metronome() {\n    const [play, setPlay] = useState(false);\n    const [bpm, setBPM] = useState(60);\n    const [timer, setTimerID] = useState(null);\n\n    const { audioContext } = useContext(context);\n\n    function playSound() {\n        const oscillator = audioContext.createOscillator();\n        oscillator.type = 'sawtooth';\n\n        const g = audioContext.createGain()\n        // limitiere erzeugten sound (verhindert störendes klicken am beginn)\n        g.gain.exponentialRampToValueAtTime(0.00001, audioContext.currentTime + 0.04)\n\n        oscillator.connect(g)\n        // oscillator -> gain -> output\n        g.connect(audioContext.destination)\n\n        oscillator.start(0)\n    }\n\n    function handlePlayButton() {\n        // wenn metronom läuft\n        if (play) {\n            // stoppe das interval, welches den klick sound erzeugt\n            clearInterval(timer);\n        } else {\n            // starte timer (und speicher id im state), der den klick sound abspielt und spiele initial ab\n            setTimerID(setInterval(playSound, 60000 / bpm));\n            playSound();\n        }\n        // toggle play status\n        setPlay(!play);\n    }\n\n    function BPMtoMS(bpm) {\n        return 60000 / bpm;\n    }\n\n    function handleBPMChange(e) {\n        // rechne bpm in ms um, e.target ist die textbox\n        const ms = BPMtoMS(e.target.value);\n        // passe die geschwindigkeit der animation an\n        document.getElementsByClassName('pendel')[0].style.animationDuration = ms + 'ms';\n        // aktualisere die darstellung\n        setBPM(e.target.value);\n    }\n\n    return (\n        <div className=\"metronome\">\n            <p>\n                <img src={metronome} alt=\"metronome\" className={play ? 'pendel animation' : 'pendel'} />\n            </p>\n                <label>Enter BPM here: </label>\n                <input readOnly={play} type=\"number\" id=\"quantity\" value={bpm} min=\"5\" max=\"240\" onChange={handleBPMChange} />\n                <button onClick={handlePlayButton}>{play ? 'Stop' : 'Start'}</button>\n        </div>\n    )\n}\n\nexport default Metronome;\n","import React from 'react';\n\nfunction String(props) {\n    return (\n        <div>\n            <div>{props.name}</div>\n            <div className=\"string\" id={props.frequency} onMouseEnter={() => props.onHover(props.frequency)}></div>\n        </div>\n    )\n}\n\nexport default String;","import React, { useContext, useState, useEffect } from 'react';\nimport \"./css/Guitar.css\";\n\nimport String from \"./String\";\nimport context from \"./AudioContext\";\n\nfunction Guitar() {\n    const { audioContext } = useContext(context);\n    const [oscillator, setOscillator] = useState(undefined);\n\n    function playSound(freq) {\n        oscillator.frequency.value = freq;\n        oscillator.start();\n        oscillator.stop(audioContext.currentTime + 1.5);\n\n        const newOscillator = audioContext.createOscillator();\n        oscillator.type = 'sawtooth';\n        newOscillator.connect(audioContext.destination);\n\n        setOscillator(newOscillator);\n    }\n\n    const strings = [\n        {\n            name: \"e2\",\n            frequency: \"82.41\"\n        },\n        {\n            name: \"a2\",\n            frequency: \"110\"\n        },\n        {\n            name: \"d3\",\n            frequency: \"146.83\"\n        },\n        {\n            name: \"g3\",\n            frequency: \"196.00\"\n        },\n        {\n            name: \"b3\",\n            frequency: \"246.94\"\n        },\n        {\n            name: \"e4\",\n            frequency: \"329.63\"\n        },\n    ];\n\n    useEffect(() => {\n        const oscillator = audioContext.createOscillator();\n        oscillator.type = 'sawtooth';\n        oscillator.connect(audioContext.destination);\n\n        setOscillator(oscillator);\n    }, [audioContext]);\n\n    return (\n        <div className=\"guitar\">\n            {strings.map(function ({ name, frequency }, index) {\n                return <String name={name} frequency={frequency} onHover={playSound} key={index} />\n            })}\n        </div>\n    )\n}\n\nexport default Guitar;\n","import React from 'react';\nimport Guitar from \"./Guitar\";\n\nfunction Tuner() {\n    \n    return (\n        <div>\n            <Guitar />\n        </div>\n    )\n}\n\nexport default Tuner;\n","import React, { useRef, useEffect } from 'react';\n\nfunction Canvas(props) {\n    const canvas = useRef(null);\n\n    function drawCanvas() {\n        // die audiodaten (waveform)\n        const audioData = props.audioData;\n        // grundsätzliches zum canvas\n        const height = canvas.current.height;\n        const width = canvas.current.width;\n        const context = canvas.current.getContext('2d');\n        // wir fangen bei koordinate x=0 an zu zeichnen\n        let x = 0;\n        // errechnen, wieviel platz pro datensegment vorhanden ist\n        const segmentWidth = width / audioData.length;\n        // farbverlauf erstellen\n        const gradient = context.createLinearGradient(0, 0, width, 0);\n        gradient.addColorStop(\"0\", \"orange\");\n        gradient.addColorStop(\"0.2\", \"yellow\");\n        gradient.addColorStop(\"0.4\", \"green\");\n        gradient.addColorStop(\"0.6\", \"cyan\");\n        gradient.addColorStop(\"0.8\", \"blue\");\n        gradient.addColorStop(\"1.0\", \"violet\");\n\n        context.lineWidth = 4;\n        context.strokeStyle = gradient;\n        context.clearRect(0, 0, width, height);\n\n        context.beginPath();\n        // wir zeichnen mittig der höhe\n        context.moveTo(0, height / 2);\n\n        // für jedes datensegment\n        for (const item of audioData) {\n            // y-wert (höhe) errechnen\n            const y = (item / 255.0) * height;\n            context.lineTo(x, y);\n            // x um eine segmenteinheits-breite erhöhen\n            x += segmentWidth;\n        }\n\n        context.lineTo(x, height / 2);\n        // zeichnen\n        context.stroke();\n    }\n\n    useEffect(() => {\n        drawCanvas();\n    })\n\n    return <canvas width=\"750\" height=\"300\" ref={canvas} style={{paddingTop: '50px'}} />;\n}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport Canvas from './Canvas';\n\nclass AudioAnalyse extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { audioData: new Uint8Array(0) };\n    this.animate = this.animate.bind(this);\n  }\n\n  componentDidMount() {\n    // wir benötigen immer einen audiocontext\n    this.audioContext = new window.AudioContext();\n    // mit dem audiocontext erzeugnén wir einen audio analyser\n    this.analyser = this.audioContext.createAnalyser();\n    // datenstruktur zum erfassen der audiodaten\n    this.audioArray = new Uint8Array(this.analyser.frequencyBinCount);\n    // erstellt MediaStreamSource Objekt anhand des zuvor übergebenen Mikrofons\n    this.input = this.audioContext.createMediaStreamSource(this.props.audio);\n    // Inputsignal verbinden mit dem AnalyserNode\n    this.input.connect(this.analyser);\n    // zeichnung vom browser anfordern\n    this.aniID = requestAnimationFrame(this.animate);\n  }\n\n  animate() {\n    // kopieren der aktuellen waveform in die zuvor erzeugte datenstruktur\n    this.analyser.getByteTimeDomainData(this.audioArray);\n    this.setState({ audioData: this.audioArray });\n    this.aniID = requestAnimationFrame(this.animate);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.aniID);\n    this.analyser.disconnect();\n    this.input.disconnect();\n  }\n\n  render() {\n    return <Canvas audioData={this.state.audioData} />;\n  }\n}\n\nexport default AudioAnalyse;\n","import React, { useState, useEffect } from 'react';\nimport Analyser from \"./AudioAnalyse\";\n\nfunction Visualization() {\n\tconst [audio, setAudio] = useState(null);\n\n\tasync function getMicrophone() {\n\t\tconst audio = await navigator.mediaDevices.getUserMedia({audio: true});\n\t\tsetAudio(audio);\n\t}\n\n\tuseEffect(() => {\n\t\tgetMicrophone();\n\t}, [])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{audio ? <Analyser audio={audio} /> : ''}\n\t\t</div>\n\t);\n}\n\nexport default Visualization;\n","import React, { useState } from 'react';\nimport Tab from './Tab';\nimport './css/Tabs.css';\nimport Metronome from './Metronome';\nimport Tuner from './Tuner';\nimport Visualization from './Visualization';\n\n/**\n * Wraps the Tab component and keeps track of the state \n */\nfunction Tabs() {\n  // remember current active tab, default 0\n  const [activeTabId, setActiveTabId] = useState(0);\n\n  const tabItems = [\n    {\n      title: 'Metronome',\n      content: <Metronome />,\n    },\n    {\n      title: 'Tuner',\n      content: <Tuner />,\n    },\n    {\n      title: 'Visualization',\n      content: <Visualization />,\n    },\n  ];\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"tabs\">\n        {tabItems.map(({ title }, index) =>\n          <Tab\n            title={title}\n            onItemClicked={() => setActiveTabId(index)}\n            isActive={activeTabId === index}\n            key={index}\n          />\n        )}\n      </div>\n      <div className=\"content\">\n        {tabItems.map(({ content }, index) => {\n          return activeTabId === index ? content : ''\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Tabs;\n","import React from 'react';\n\nimport './css/App.css';\nimport Tabs from './Tabs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Guitar-o-mate</h1>\n        <Tabs />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}